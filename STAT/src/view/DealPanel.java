package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingUtilities;
import model.Card;
import model.Card.Rank;
import model.Dealer;
import model.Player;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.log4j.Logger;

public class DealPanel extends javax.swing.JPanel {

	static Logger logger = Logger.getLogger(DealPanel.class); 
	Player[] players;
        Dealer dealer;
        Card[] discardPile;
        Rank currRank;
        ArrayList<Rank> playedRanks = new ArrayList<>();
        Random nRand;
        JLabel lblRank = new JLabel("Rank");
        int currDiscardCount = 0;
        int currPlayer = 0;
        Card lastCardDropped;
    /** Creates new form dealPanel 
     * @throws IOException */
    public DealPanel() throws IOException {
        
        
        ////////////////////
        // custom init
        
        // a default dealer
        dealer = new Dealer();
        initComponents();
        dealer.addObserver(drawPanel);
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * @throws IOException 
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws IOException {

        drawPanel = new TableDrawPanel();
        handsComboBox = new javax.swing.JComboBox();
        btnAddCard = new javax.swing.JButton();

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 255, Short.MAX_VALUE)
        );
        
        //handsComboBox.setModel(new DefaultComboBoxModel((String[]) cards.toArray()));
        //handsComboBox.setSelectedIndex(0);

        btnAddCard.setText("Call Bluff!");
        btnAddCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					dealButtonActionPerformed(evt);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });
        
        //JComboBox rankComboBox = new JComboBox();
        //rankComboBox.setModel(new DefaultComboBoxModel();
        
        JButton btnRemoveCard = new JButton("Put Down Card");
        btnRemoveCard.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		//System.out.println(rankComboBox.getSelectedIndex()+"hai"+handsComboBox.getSelectedIndex());
                        
        		Card tempcard = (Card) handsComboBox.getModel().getSelectedItem();
                        lastCardDropped = tempcard;
        		dealer.removeCard(tempcard,players[0]);
        		setComboBox(dealer.getHuman().getHand());
        		drawPanel.command = 2;
                        drawPanel.input = true;
                        
        		//drawPanel.currCards--;
            	repaint();
        	}
        });
        
        JLabel lblCurrentRank = new JLabel("Current rank: ");
        
        JButton btnGivePile = new JButton("give pile");
        btnGivePile.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		dealer.giveDiscardPileToPlayer(players[0]);
        		drawPanel.command = 1;
        		repaint();
        	}
        });
        
       
        
        

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(lblCurrentRank)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(lblRank)
        					.addGap(32)
        					.addComponent(btnGivePile)
        					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        					//.addComponent(rankComboBox, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(handsComboBox, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnRemoveCard, GroupLayout.PREFERRED_SIZE, 133, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnAddCard, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
        				.addComponent(drawPanel, GroupLayout.PREFERRED_SIZE, 837, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(drawPanel, GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(btnAddCard)
        					.addComponent(btnRemoveCard)
        					.addComponent(handsComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					//.addComponent(rankComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(lblCurrentRank)
        					.addComponent(lblRank)
        					.addComponent(btnGivePile)))
        			.addContainerGap())
        );
        this.setLayout(layout);
    }// </editor-fold>

    private void dealButtonActionPerformed(java.awt.event.ActionEvent evt) throws InterruptedException {
        drawPanel.command = 1;
    	repaint();
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton btnAddCard;
    private TableDrawPanel drawPanel;
    private javax.swing.JComboBox handsComboBox;
    // End of variables declaration

    int dealState = 0;
    
    public void setComboBox(Card[] cards)
    {
        this.handsComboBox.setModel(new DefaultComboBoxModel(cards));
        this.handsComboBox.setSelectedIndex(0);
    }
    
    public String suitConvert(String suit){
    	switch(suit){
    	case "Heart":
    		return "H";
    	case "Spade":
    		return "S";
    	case "Club":
    		return "C";
    	default:
    		return "D";
    	}
    }
    
    public String rankConvert(String rank){
    	switch(rank){
    	case "Jack":
    		return "J";
    	case "Queen":
    		return "Q";
    	case "King":
    		return "K";
    	default:
    		return rank;
    	}
    }
    
 
    /**
     * deal once
     */
    public void deal() {
    	if (dealer.isCompleted() && !dealer.isScored()) {
    		//dealer.scoreHands();
    	} else {
    		dealer.deal();
                setComboBox(dealer.getHuman().getHand());
    	}
    	
    	dealer.notifyObservers();
    	logger.debug("deal: " + dealer.toString());
    }
    
        public void getPlayers()
        {
            this.players = dealer.getAllPlayers();
        }
        
        public Rank getCurrPlayRank()
        {
            nRand = new Random();
            if(playedRanks.size() == 13)
            {
                playedRanks.clear();
            }
            
            Rank tempRank;
            do{
            int randomValue = nRand.nextInt(65536) % 13 + 1;
            System.out.println(randomValue);
            tempRank = Rank.getRank(randomValue);
            }while(playedRanks.contains(tempRank));
            playedRanks.add(tempRank);
           // System.out.println(tempRank.toString());
            lblRank.setText(tempRank.toString());
            return tempRank;
        }
        
        public boolean isBluff(Card tempCard){
            if(currRank != tempCard.getRank())
                return true;
            return false;
        }
        
                public double getBluffProbability(int playersRankedCards, int opponentsHand){
                    double num;
                if(playersRankedCards == 4){
                        return 1;
                }
                    else if(playersRankedCards == 3){
                        num = 1;
                            return (((num) / 52) * opponentsHand);
                }
                else if(playersRankedCards == 2){
                    num = 2;
                        return 1 - (((num) / 52) * opponentsHand);
                }
                else if(playersRankedCards == 1){
                    num = 3;
                        return 1 - (((num) / 52) * opponentsHand);
                }
                else return 0;
                }
                
                public double getTruthProbability(int playersRankedCards, int opponentsHand){
                if(playersRankedCards == 4){
                        return 0;
                }
                    else if(playersRankedCards == 3){
                        return ((1 / 52) * opponentsHand);
                }
                    else if(playersRankedCards == 2){
                        return ((2 / 52) * opponentsHand);
                }
                    else if(playersRankedCards == 1){
                        return ((3 / 52) * opponentsHand);
                }
                else return 0;
                }
        
        public boolean playRound()
        {
            int turn = 0;
            currPlayer = 0;
            while(turn != 4){
                Player tempPlayer = players[currPlayer];
                Random rand = new Random();
                int randomNum = rand.nextInt(((tempPlayer.handSize() - 1) - 0) + 1);
                if(currPlayer != 0){
                    if(currPlayer < 4){
                        Card tempCard = null;
                        for(int i = 0; i < tempPlayer.handSize(); i++){
                            if(tempPlayer.getHand()[i].getRank() == currRank)
                            {
                                tempCard = tempPlayer.getHand()[i];
                                System.out.println(tempCard.toString());
                            }
                        }

                        if(tempCard == null)
                            tempCard = tempPlayer.getHand()[randomNum];
                        
                        Card[] tempCards = new Card[52];
                        tempCards = dealer.getHuman().getHand();
                        tempCards[51] = lastCardDropped;
                        int tempLength = 52;
                        
                        int k = 0;
                        for(int i = 0; i < tempLength; i++)
                        {
                            if(tempCards[i] != null)
                                if(currRank == tempCards[i].getRank())
                                    k++;
                        }
                        
                        JOptionPane.showMessageDialog(null, "Player "+currPlayer + " dropped a card. He has " + tempPlayer.handSize + " cards. He has " +  
                                this.getBluffProbability(k, tempPlayer.handSize()) + " chance of bluffing. You have " + k + " in this rank.");
                        tempPlayer.removeCardFromHand(tempCard);  
                        dealer.addToDiscard(tempCard);

                        if (JOptionPane.showConfirmDialog(null, "Call Bluff?", "WARNING",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            JOptionPane.showMessageDialog(null, "Player 1 has called bluff on Player " + currPlayer + "!");
                            if(isBluff(tempCard)){
                                JOptionPane.showMessageDialog(null, "Player " + currPlayer + " is bluffing!");
                                dealer.giveDiscardPileToPlayer(tempPlayer);
                            }else{
                                JOptionPane.showMessageDialog(null, "Player 1 called wrong!");
                                dealer.giveDiscardPileToPlayer(dealer.getHuman());
                                setComboBox(dealer.getHuman().getHand());
                                lastCardDropped = new Card();
                            }
                            drawPanel.command = 1;
                            repaint();
                        }

                        currPlayer++;
                    }else currPlayer = 0;
                    drawPanel.input = false;
                }else {
                    while(!drawPanel.input){
                        System.out.println("no input yet.");
                    }
                    currPlayer++;
                }
                turn++;
            }
            return true;
        }
        
        public void startGame()
        {
            while(!players[0].isWinner() && !players[1].isWinner() && !players[2].isWinner() && !players[3].isWinner())
            {
                currRank = getCurrPlayRank();
                playRound();
            }
           
        }
        
	public void setDealer(Dealer dealer) {
		this.dealer = dealer;
		dealer.addObserver(drawPanel);
	}
    
	public Dealer getDealer() {
		return dealer;
	}

	////////////////////////////////
	// test
	
	public static void main(String[] args) throws InterruptedException, IOException {
		final JFrame jFrame = new JFrame();;
		final DealPanel dealPanel = new DealPanel();
		
		jFrame.getContentPane().add(dealPanel);
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE );

//		SwingUtilities.invokeLater(new Runnable() {
//			
//			@Override
//			public void run() {
//				jFrame.pack();
//				jFrame.setVisible(true);
//			}
//		});
		
		// animation 
		// deal, flop, turn, river, score
                jFrame.pack();
                jFrame.setVisible(true);
					dealPanel.deal();
                                        Thread.sleep(1000);
                                        dealPanel.getPlayers();
                                        dealPanel.startGame();
	}
}
